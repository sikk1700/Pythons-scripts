import math
Hoh = float(input("Wat is de hart op hart afstand in milimeters?  "))
Dikte_Laag0 = float(input("Wat is de dikte van de laag tot onderkant poer in meters?  "))
Droogvolumiekgewicht_Laag1 = float(input("Wat is het droge volumieke gewicht in kN/m3 van laag 1?  "))
Natvolumiekgewicht_Laag1 = float(input("Wat is het natte volumieke gewicht in kN/m3 van laag 1?  "))
Hoekinwendigewrijving_Laag1 =float(input("Wat is de hoek van inwendige wrijving in graden van laag 1?  "))
Effectievecohesie_Laag1 = float(input("Wat is de effectieve cohesie in kPa van laag 1?  "))
Samendrukkingsconstante_Laag1 = float(input("Wat is de samendrukkingsconstante van laag 1?  "))
Dikte_Laag1 = float(input("Wat is de dikte laag 1 in meters?  "))
Natvolumiekgewicht_Laag2 = float(input("Wat is het natte volumieke gewicht in kN/m3 van laag 2?  "))
Hoekinwendigewrijving_Laag2 =float(input("Wat is de hoek van inwendige wrijving in graden van laag 2?  "))
Effectievecohesie_Laag2 = float(input("Wat is de effectieve cohesie in kPa van laag 2?  "))
Ongedraineerdecohesie_Laag2 = float(input("Wat is de ongedraineerde cohesie van laag 2?  "))
Samendrukkingsconstante_Laag2 = float(input("Wat is de samendrukkingsconstante van laag 2?  "))
Dikte_Laag2 = float(input("Wat is de dikte van laag 2 in meters?  "))
Natvolumiekgewicht_Laag3 = float(input("Wat is het natte volumieke gewicht in kN/m3 van laag 3?  "))
Hoekinwendigewrijving_Laag3 =float(input("Wat is de hoek van inwendige wrijving in graden van laag 3?  "))
Effectievecohesie_Laag3 = float(input("Wat is de effectieve cohesie in kPa van laag 3?  "))
Samendrukkingsconstante_Laag3 = float(input("Wat is de samendrukkingsconstante van laag 3?  "))
Dikte_Laag3 = float(input("Wat is de dikte van laag 3 in meters?  "))
Volumiekgewicht_Water = float(input("Wat is het volumiek gewicht van water in kN/m3?  "))
Representatievebelasting_Eigengewicht = float(input("Wat is de representatieve belasting van het eigengewicht in kN?  "))
Representatievebelasting_Variabel = float(input("Wat is de representatieve variabele belasting in kN?  "))
Belastingscoëfficiënt_Eigengewicht = float(input("Wat is de belastingscoëfficiënt van het eigengewicht?  "))
Belastingscoëfficiënt_Variabel = float(input("Wat is de belastingscoëfficiënt van de variabele belasting?  "))
Moment_Funderingsniveau = float(input("Wat is het moment op funderingsniveau in kNm?  "))
Rekenwaarde_Eigengewicht = (Representatievebelasting_Eigengewicht * Belastingscoëfficiënt_Eigengewicht)
print("")
print("Belastingen:")
print(" Rekenwaarde belasting eigengewicht " + str(round(Rekenwaarde_Eigengewicht, 3))+" kN")
Rekenwaarde_Variabel = (Representatievebelasting_Variabel * Belastingscoëfficiënt_Variabel)
print(" Rekenwaarde belasting variabel " + str(round(Rekenwaarde_Variabel, 3))+" kN")
Representatievebelasting = (Representatievebelasting_Eigengewicht + Representatievebelasting_Variabel)
print(" Representatieve belasting " + str(round(Representatievebelasting, 3))+" kN")
Rekenwaardebelasting = (Rekenwaarde_Eigengewicht + Rekenwaarde_Variabel)
print(" Rekenwaarde belasting " + str(round(Rekenwaardebelasting, 3))+" kN")
print("")
print("Berekening draagkracht gedraineerd:")
print(" Laag 1:")
Hoekinwendigewrijving_Laag1_Radialen = float((Hoekinwendigewrijving_Laag1) / 180 * math.pi)
Rekenwaarde_Hoekinwendigewrijving_Laag1 = math.atan(math.tan(Hoekinwendigewrijving_Laag1_Radialen)/1.15)
print("  Rekenwaarde hoek inwendige wrijving " + str(round(math.degrees(Rekenwaarde_Hoekinwendigewrijving_Laag1), 2))+" °")
Rekenwaarde_Effectievecohesie_Laag1 = (Effectievecohesie_Laag1 / 1.6)
print("  Rekenwaarde effectieve cohesie " + str(round(Rekenwaarde_Effectievecohesie_Laag1, 2))+" kPa")
Rekenwaarde_Volumiekgewichtbovengrondwaterstand_Laag1 = (Droogvolumiekgewicht_Laag1 / 1.1)
print("  Rekenwaarde volumiek gewicht boven grondwaterstand " + str(round(Rekenwaarde_Volumiekgewichtbovengrondwaterstand_Laag1, 2))+" kN/m3")
Rekenwaarde_Volumiekgewichtondergrondwaterstand_Laag1 = (Natvolumiekgewicht_Laag1 / 1.1)
print("  Rekenwaarde volumiek gewicht onder grondwaterstand " + str(round(Rekenwaarde_Volumiekgewichtondergrondwaterstand_Laag1, 2))+" kN/m3")
Effectief_Volumiekgewicht_Laag1 = (Rekenwaarde_Volumiekgewichtondergrondwaterstand_Laag1 - Volumiekgewicht_Water)
print("  Effectief volumiek gewicht " + str(round(Effectief_Volumiekgewicht_Laag1, 2))+" kN/m3")
print(" Laag 2:")
Hoekinwendigewrijving_Laag2_Radialen = float((Hoekinwendigewrijving_Laag2) / 180 * math.pi)
Rekenwaarde_Hoekinwendigewrijving_Laag2 = math.atan(math.tan(Hoekinwendigewrijving_Laag2_Radialen)/1.15)
print("  Rekenwaarde hoek inwendige wrijving " + str(round(math.degrees(Rekenwaarde_Hoekinwendigewrijving_Laag2), 2))+" °")
Rekenwaarde_Effectievecohesie_Laag2 = (Effectievecohesie_Laag2 / 1.6)
print("  Rekenwaarde effectieve cohesie " + str(round(Rekenwaarde_Effectievecohesie_Laag2, 2))+" kPa")
Rekenwaarde_Ongedraineerdecohesie = (Ongedraineerdecohesie_Laag2 / 1.35)
print("  Rekenwaarde ongedraineerde cohesie " + str(round(Rekenwaarde_Ongedraineerdecohesie, 2))+" kPa")
Rekenwaarde_Volumiekgewichtondergrondwaterstand_Laag2 = (Natvolumiekgewicht_Laag2 / 1.1)
print("  Rekenwaarde volumiek gewicht onder grondwaterstand " + str(round(Rekenwaarde_Volumiekgewichtondergrondwaterstand_Laag2, 2))+" kN/m3")
Effectief_Volumiekgewicht_Laag2 = (Rekenwaarde_Volumiekgewichtondergrondwaterstand_Laag2 - Volumiekgewicht_Water)
print("  Effectief volumiek gewicht " + str(round(Effectief_Volumiekgewicht_Laag2, 2))+" kN/m3")
print(" Laag 3:")
Hoekinwendigewrijving_Laag3_Radialen = float((Hoekinwendigewrijving_Laag3) / 180 * math.pi)
Rekenwaarde_Hoekinwendigewrijving_Laag3 = math.atan(math.tan(Hoekinwendigewrijving_Laag3_Radialen)/1.15)
print("  Rekenwaarde hoek inwendige wrijving " + str(round(math.degrees(Rekenwaarde_Hoekinwendigewrijving_Laag3), 2))+" °")
Rekenwaarde_Effectievecohesie_Laag3 = (Effectievecohesie_Laag3 / 1.6)
print("  Rekenwaarde effectieve cohesie " + str(round(Rekenwaarde_Effectievecohesie_Laag3, 2))+" kPa")
Rekenwaarde_Volumiekgewichtondergrondwaterstand_Laag3 = (Natvolumiekgewicht_Laag3 / 1.1)
print("  Rekenwaarde volumiek gewicht onder grondwaterstand " + str(round(Rekenwaarde_Volumiekgewichtondergrondwaterstand_Laag3, 2))+" kN/m3")
Effectief_Volumiekgewicht_Laag3 = (Rekenwaarde_Volumiekgewichtondergrondwaterstand_Laag3 - Volumiekgewicht_Water)
print("  Effectief volumiek gewicht " + str(round(Effectief_Volumiekgewicht_Laag3, 2))+" kN/m3")
print("")
Rekendraagkracht_Poer = float(input("Wat is de rekendraagkracht van de poer in kN/m2?  "))
print("")
Breedte_Poer = math.sqrt(Rekenwaardebelasting/Rekendraagkracht_Poer)
print("  Breedte = Lengte " + str(round(Breedte_Poer, 2)) + " m")
Excentriciteit = (Moment_Funderingsniveau/Rekenwaardebelasting)
print("  Excentriciteit " + str(round(Excentriciteit, 2)) + " m")
Effectievebreedte_Poer = (Breedte_Poer - (2*Excentriciteit))
print("  Effectieve breedte poer " + str(round(Effectievebreedte_Poer, 2)) + " m")
Effectievelengte_Poer = (Breedte_Poer)
print("  Effectieve lengte poer " + str(round(Effectievelengte_Poer, 2)) + " m")
Invloedsdiepte = (1.5 * Effectievebreedte_Poer)
print("  Invloedsdiepte " + str(round(Invloedsdiepte, 2)) + " m")
Laag1 = Dikte_Laag1
Laag2 = Invloedsdiepte - Laag1
Laag3 = Invloedsdiepte - (Laag1 + Dikte_Laag2)
if Laag1 > 0:
  Wegingsfactor1 = (Invloedsdiepte - (Laag1 / 2))
else:
  Wegingsfactor1 = 0
if Laag2 > 0:
  Wegingsfactor2 = (Invloedsdiepte - Laag1 - Laag2 / 2)
else:
  Wegingsfactor2 = 0
if Laag3 > 0:
  Wegingsfactor3 = (Laag3 / 2)
else:
  Wegingsfactor3 = 0
print("")
print("  Wegingsfactor x1 " + str(round(Wegingsfactor1, 2)))
print("  Wegingsfactor x2 " + str(round(Wegingsfactor2, 2)))
print("  Wegingsfactor x3 " + str(round(Wegingsfactor3, 2)))
Gewogenwaarde_Hoekinwendigewrijving = (((math.degrees(Rekenwaarde_Hoekinwendigewrijving_Laag1) * Laag1 * Wegingsfactor1) + (math.degrees(Rekenwaarde_Hoekinwendigewrijving_Laag2) * Laag2 * Wegingsfactor2) + (math.degrees(Rekenwaarde_Hoekinwendigewrijving_Laag3) * Laag3 * Wegingsfactor3)) / ((Laag1 * Wegingsfactor1) + (Laag2 * Wegingsfactor2) + (Laag3 * Wegingsfactor3)))
print("")
if Gewogenwaarde_Hoekinwendigewrijving > (math.degrees(Rekenwaarde_Hoekinwendigewrijving_Laag1 + 1)):
  print("  Gewogen waarde hoek van inwendige wrijving " + str(round(math.degrees(Rekenwaarde_Hoekinwendigewrijving_Laag1 + 1), 2))+" °")
else:
  print("  Gewogen waarde hoek van inwendige wrijving " + str(round(Gewogenwaarde_Hoekinwendigewrijving, 2))+" °")  
Gewogenwaarde_Effectievecohesie = (((Rekenwaarde_Effectievecohesie_Laag1 * Laag1 * Wegingsfactor1) + (Rekenwaarde_Effectievecohesie_Laag2 * Laag2 * Wegingsfactor2) + (Rekenwaarde_Effectievecohesie_Laag3 * Laag3 * Wegingsfactor3)) / ((Laag1 * Wegingsfactor1) + (Laag2 * Wegingsfactor2) + (Laag3 * Wegingsfactor3)))
print("  Gewogen waarde effectieve cohesie " + str(round(Gewogenwaarde_Effectievecohesie, 2))+" kPa")
Gewogenwaarde_Effectief_Volumiekgewicht = (((Effectief_Volumiekgewicht_Laag1 * Laag1 * Wegingsfactor1) + (Effectief_Volumiekgewicht_Laag2 * Laag2 * Wegingsfactor2) + (Effectief_Volumiekgewicht_Laag3 * Laag3 * Wegingsfactor3)) / ((Laag1 * Wegingsfactor1) + (Laag2 * Wegingsfactor2) + (Laag3 * Wegingsfactor3)))
print("  Gewogen waarde effectief volumiek gewicht " + str(round(Gewogenwaarde_Effectief_Volumiekgewicht, 2))+ " kN/m3")
Nq = ((math.e**(math.pi*(math.tan(math.radians(Gewogenwaarde_Hoekinwendigewrijving))))*(math.tan(math.radians(45 + 0.5 * Gewogenwaarde_Hoekinwendigewrijving))**2)))
Nc = ((Nq - 1) * (1 / (math.tan(math.radians(Gewogenwaarde_Hoekinwendigewrijving)))))
Ny = (2 * (Nq- 1) * (math.tan(math.radians(Gewogenwaarde_Hoekinwendigewrijving))))
Sq = (1 + ((Effectievebreedte_Poer/Effectievelengte_Poer)* math.sin(math.radians(Gewogenwaarde_Hoekinwendigewrijving))))
Sc = ((Sq * Nq -1) / (Nq - 1))
Sy = (1 - (0.3 * (Effectievebreedte_Poer/Effectievelengte_Poer)))
Iq = 1
Ic = 1
Iy = 1
Grondspanning_Bovenbelasting = (Dikte_Laag0 * Rekenwaarde_Volumiekgewichtbovengrondwaterstand_Laag1)
Aandeel_Glijvlak = (Gewogenwaarde_Effectievecohesie * Nc * Sc * Ic)
Aandeel_Bovenbelasting = (Grondspanning_Bovenbelasting * Nq * Sq * Iq)
Aandeel_Grondwig = (0.5 * Gewogenwaarde_Effectief_Volumiekgewicht * Effectievebreedte_Poer * Ny * Sy * Iy)
Maximaal_Toelaatbare_Grondspanning = (Aandeel_Bovenbelasting + Aandeel_Glijvlak + Aandeel_Grondwig)
print("")
print("  Aandeel glijvlak " + str(round(Aandeel_Glijvlak, 2))+ " kN/m2")
print("  Aandeel bovenbelasting " + str(round(Aandeel_Bovenbelasting, 2))+ " kN/m2")
print("  Aandeel grondwig " + str(round(Aandeel_Grondwig, 2))+ " kN/m2")
print("  Maximaal toelaatbare grondspanning " + str(round(Maximaal_Toelaatbare_Grondspanning, 2))+ " kN/m2")
Effectief_Oppervlak_Poer = (Effectievebreedte_Poer * Effectievelengte_Poer)
Draagkracht_Poer = ((Effectief_Oppervlak_Poer) * Maximaal_Toelaatbare_Grondspanning)
print("")
print("  Aeff " + str(round(Effectief_Oppervlak_Poer, 2)) + " m2")
print("  Draagkracht van de poer " + str(round(Draagkracht_Poer))+ " kN")
print("  Rekenwaarde belasting " + str(round(Rekenwaardebelasting)) +" kN")
if Draagkracht_Poer > Rekenwaardebelasting:
  print("     Draagkracht poer gedraineerd voldoet aan de eis")
else:
  print("     Draagkracht poer gedraineerd voldoet niet aan de eis")
print("")
print("Berekening draagkracht ongedraineerd:")
Sc_Ongedraineerd = (1 + 0.2 * (Effectievebreedte_Poer/Effectievelengte_Poer))
Ic_Ongedraineerd = 1
Grondspanning_Ongedraineerd = (Grondspanning_Bovenbelasting + Dikte_Laag1 * Effectief_Volumiekgewicht_Laag1)
Maximaal_Toelaatbare_Grondspanning_Ongedraineerd = (((math.pi + 2) * Rekenwaarde_Ongedraineerdecohesie * Sc_Ongedraineerd * Ic_Ongedraineerd) + Grondspanning_Ongedraineerd)
print("")
print("  Sc " + str(round(Sc_Ongedraineerd, 2)))
print("  Grondspanning ongedraineerd " + str(round(Grondspanning_Ongedraineerd, 2)) + " kPa")
print("  Maximaal toelaatbare grondspanning ongedraineerd " + str(round(Maximaal_Toelaatbare_Grondspanning_Ongedraineerd, 2)) + " kPa")
print("")
print("  Aeff " + str(round(Effectief_Oppervlak_Poer, 2)) + " m2")
Draagkracht_Poer_Ongedraineerd = ((Effectief_Oppervlak_Poer) * Maximaal_Toelaatbare_Grondspanning_Ongedraineerd)
print("  Draagkracht van de poer ongedraineerd " + str(round(Draagkracht_Poer_Ongedraineerd))+ " kN")
print("  Rekenwaarde belasting " + str(round(Rekenwaardebelasting)) +" kN")
if Draagkracht_Poer_Ongedraineerd > Rekenwaardebelasting:
  print("     Draagkracht poer ongedraineerd voldoet aan de eis")
else:
  print("     Draagkracht poer ongedraineerd voldoet niet aan de eis")
print("")
print("Berekening zettingen:")
print("  Representatieve belasting " + str(round(Representatievebelasting, 2))+" kN")
print("")
Korrelspanning_Laag1_Boven = (Dikte_Laag0 * Droogvolumiekgewicht_Laag1)
Korrelspanning_Laag1_Onder = (Korrelspanning_Laag1_Boven + (Dikte_Laag1 * (Natvolumiekgewicht_Laag1-10)))
Korrelspanning_Laag1_Hart = (Korrelspanning_Laag1_Boven + Korrelspanning_Laag1_Onder) / 2
print("  Korrelspanning boven " + str(round(Korrelspanning_Laag1_Boven, 2)) + " kPa")
print("  Korrelspanning onder " + str(round(Korrelspanning_Laag1_Onder, 2)) + " kPa")
print("  Korrelspanning Hart " + str(round(Korrelspanning_Laag1_Hart, 2)) + " kPa")
print("")
Korrelspanning_Laag2_Boven = Korrelspanning_Laag1_Onder
Korrelspanning_Laag2_Onder = (Korrelspanning_Laag2_Boven + (Dikte_Laag2 * (Natvolumiekgewicht_Laag2-10)))
Korrelspanning_Laag2_Hart = (Korrelspanning_Laag2_Boven + Korrelspanning_Laag2_Onder) / 2
print("  Korrelspanning boven " + str(round(Korrelspanning_Laag2_Boven, 2)) + " kPa")
print("  Korrelspanning onder " + str(round(Korrelspanning_Laag2_Onder, 2)) + " kPa")
print("  Korrelspanning Hart " + str(round(Korrelspanning_Laag2_Hart, 2)) + " kPa")
print("")
print("  B = " + str(round(Breedte_Poer, 2)) + " m")
print("  L = " + str(round(Breedte_Poer, 2)) + " m")
Spanningsverhoging_Laag1 = (Representatievebelasting / ((Breedte_Poer + Dikte_Laag1 /2)*(Breedte_Poer + Dikte_Laag1 /2)))
Spanningsverhoging_Laag2 = (Representatievebelasting / ((Breedte_Poer + Dikte_Laag1 + Dikte_Laag2 / 2) * (Breedte_Poer + Dikte_Laag1 + Dikte_Laag2 /2)))
print("  Spanningsverhoging laag 1 " + str(round(Spanningsverhoging_Laag1, 2)) + " kPa")
print("  Spanningsverhoging laag 2 " + str(round(Spanningsverhoging_Laag2, 2)) + " kPa")
print("")
Zetting_Laag1 = (Dikte_Laag1 / Samendrukkingsconstante_Laag1) * math.log((Korrelspanning_Laag1_Hart + Spanningsverhoging_Laag1)/Korrelspanning_Laag1_Hart, math.e) * 1000
Zetting_Laag2 = (Dikte_Laag2 / Samendrukkingsconstante_Laag2) * math.log((Korrelspanning_Laag2_Hart + Spanningsverhoging_Laag2)/Korrelspanning_Laag2_Hart, math.e) * 1000
Zetting_Totaal = Zetting_Laag1 + Zetting_Laag2
print("  Zetting laag 1 " + str(round(Zetting_Laag1))+" mm")
print("  Zetting laag 2 " + str(round(Zetting_Laag2))+" mm")
print("  Zetting totaal " + str(round(Zetting_Totaal))+" mm")
if Zetting_Totaal < 50:
  print("     Zetting voldoet aan de eis")
else:
  print("     Zetting voldoet niet aan de eis")
Hoekverdraaiing = 0.5 * (Zetting_Totaal / Hoh)
if Hoekverdraaiing < (1/300):
  print("     Hoekverdraaiing voldoet aan de eis")
else:
  print("     Hoekverdraaiing voldoet niet aan de eis")
  print("     Vergroot de afmetingen van de poer, zodat de spanningsverhoging kleiner wordt. Dit zorgt ervoor dat de hoekverdraaiing ook kleiner wordt.")
input("Druk op enter om het bestand te sluiten")